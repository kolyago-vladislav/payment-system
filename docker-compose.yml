services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: person
    command: [ "postgres", "-c", "port=5434" ]
    ports:
      - "5434:5434"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -p 5434" ]
      interval: 2s
      timeout: 5s
      retries: 25

  flyway-persons:
    image: flyway/flyway
    container_name: flyway-persons
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      FLYWAY_URL: jdbc:postgresql://postgres:5434/person
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: postgres
    command: migrate
    volumes:
      - ./flyway:/flyway/sql


  individuals-api:
    build: ./individuals-api
    container_name: individuals-api
    ports:
      - "8091:8091"
    environment:
      KEYCLOAK_URL: http://keycloak:8080
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      grafana:
        condition: service_healthy
      keycloak-healthcheck:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: individuals-keycloak
    command: start-dev --import-realm --health-enabled=true
    ports:
      - "8080:8080"
      - "9000:9000"
    environment:
      JAVA_OPTS: -Dkeycloak.migration.usersExportStrategy=REALM_FILE
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
    volumes:
      - ./individuals-api/src/main/resources/realm-config.json:/opt/keycloak/data/import/realm-config.json
    depends_on:
      keycloak-postgres:
        condition: service_healthy

  keycloak-postgres:
    image: postgres:17
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-healthcheck:
    image: curlimages/curl:7.85.0
    depends_on:
      - keycloak
      - keycloak-postgres
    command: ["sh", "-c", "
      until curl -f http://keycloak:9000/health; do
        echo 'Waiting for Keycloak...';
        sleep 5;
      done
    "]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:10.3.1
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      alloy:
        condition: service_started
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - nexus-data:/nexus-data
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    user: "root"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    user: root
    ports:
      - "9080:9080"  # HTTP-интерфейс Alloy (по умолчанию)
      - "4317:4317"   # OTLP gRPC (важно!)
      - "4318:4318"   # OTLP HTTP (если нужен)
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: http://loki:3100/loki/api/v1/push
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy


  common:
    build:
      context: ./common
      dockerfile: Dockerfile
    container_name: common
    environment:
      NEXUS_URL: "http://nexus:8081/repository/maven-snapshots/"
      NEXUS_USERNAME: admin
      NEXUS_PASSWORD: admin
      ARTEFACT_VERSION: "1.0.0-SNAPSHOT"
    depends_on:
      nexus-change-password:
        condition: service_completed_successfully
    command: gradle clean build publish --no-daemon

  nexus:
    image: sonatype/nexus3:3.76.0
    ports:
      - "8081:8081"
    volumes:
      - nexus-data:/nexus-data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status"]
      interval: 5s
      timeout: 10s
      retries: 30

  nexus-change-password:
    image: appropriate/curl
    environment:
      - NEXUS_ADMIN_PASSWORD_FILE=/nexus-data/admin.password
      - NEXUS_NEW_PASSWORD=admin
    depends_on:
      nexus:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/scripts/change-password.sh"]
    volumes:
      - nexus-data:/nexus-data
      - ./nexus:/scripts:ro

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo/tempo.yaml
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"

volumes:
  tempo_data:
  nexus-data:
  loki_data:
  loki_chunks:
  loki_index:
  loki_rules: